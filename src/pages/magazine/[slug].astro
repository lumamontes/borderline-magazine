---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Header from "../../components/Header.astro";
import LayoutHeader from "../../layouts/LayoutHeader.astro";
import MagazineFlipbook from "../../components/MagazineFlipbook.tsx";
import { getMagazineColorPalette } from "../../lib/imageColors.ts";

export async function getStaticPaths() {
  const magazines = await getCollection("magazines");
  return magazines.filter((magazine) => magazine.data.display && magazine.data.featured).map((magazine) => ({
    params: { slug: magazine.slug },
    props: { magazine },
  }));
}


const { magazine } = Astro.props;
const { Content } = await magazine.render();

const allMagazineImages = import.meta.glob<{ default: ImageMetadata }>('../../assets/magazines/**/*.{png,jpg,jpeg,gif,webp}', { eager: true });

// Get cover image
const coverImagePath = magazine.data.coverImage.replace('/src/assets/', '../../assets/');
const coverImage = allMagazineImages[coverImagePath]?.default;

// Get page images
const pagesDirPath = magazine.data.pagesDir?.replace('/src/assets/', '../../assets/');
const allPageImages = Object.values(allMagazineImages)
  .filter((img) => {
    const imgPath = Object.keys(allMagazineImages).find(key => allMagazineImages[key] === img);
    return imgPath && imgPath.includes(pagesDirPath || 'assets/magazines/');
  })
  .map((img) => ({ src: img.default.src, alt: `${magazine.data.title} page` }));

const colorPalette = getMagazineColorPalette(magazine);
const seoTitle = magazine.data.seo?.title || `${magazine.data.title} | Borderline Litmag`;
const seoDescription = magazine.data.seo?.description || magazine.data.description;
const baseURL = Astro.site || "https://borderlinemag.netlify.app";
const canonicalURL = `${baseURL}/magazine/${magazine.slug}`;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "CreativeWork",
  "name": magazine.data.title,
  "description": magazine.data.description,
  "url": canonicalURL.toString(),
  "datePublished": magazine.data.publishDate.toISOString(),
  "inLanguage": "en",
  "genre": "Literary Magazine",
  "keywords": magazine.data.tags.join(", "),
  "isPartOf": {
    "@type": "CollectionPage",
    "name": "Borderline Litmag Magazine Collection",
    "url": new URL("/magazine", baseURL).toString()
  }
};
---

<!-- SEO Meta Tags -->
<title>{seoTitle}</title>
<meta name="description" content={seoDescription} />
<meta name="keywords" content={magazine.data.tags.join(", ")} />
<link rel="canonical" href={canonicalURL.toString()} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalURL.toString()} />
<meta property="og:title" content={seoTitle} />
<meta property="og:description" content={seoDescription} />
<meta property="og:image" content={new URL(magazine.data.coverImage, baseURL).toString()} />
<meta property="article:published_time" content={magazine.data.publishDate.toISOString()} />
<meta property="article:author" content="Borderline Litmag" />
<meta property="article:section" content="Literature" />
{magazine.data.tags.map(tag => (
  <meta property="article:tag" content={tag} />
))}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL.toString()} />
<meta property="twitter:title" content={seoTitle} />
<meta property="twitter:description" content={seoDescription} />
<meta property="twitter:image" content={new URL(magazine.data.coverImage, baseURL).toString()} />

<!-- Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

<LayoutHeader>
  
  <Header />
  
  <!-- Breadcrumb -->
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" aria-label="Breadcrumb">
    <ol class="flex items-center space-x-2 text-sm text-gray-500">
      <li><a href="/" class="hover:text-gray-700">Home</a></li>
      <li>/</li>
      <li><a href="/magazine" class="hover:text-gray-700">Magazine</a></li>
      <li>/</li>
      <li class="text-gray-900">{magazine.data.title}</li>
    </ol>
  </nav>

  <!-- Magazine Header -->
  <section class="relative overflow-hidden">
    <!-- Blurred background from cover image -->
    <div 
      class="absolute inset-0 -z-20"
      style={`
        background-image: url('${coverImage?.src || magazine.data.coverImage}');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        filter: blur(20px) brightness(0.7);
        transform: scale(1.1);
      `}
    ></div>
    <div class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] -z-10"></div>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-16 pb-16">
      <div class="flex flex-col md:flex-row items-center justify-between gap-8 md:gap-12">
        <!-- //make a blur background for the text content  -->
        <div class="w-full md:w-1/2 text-left md:text-start bg-white backdrop-blur-md p-6 rounded-md">
          <h1 class="text-3xl sm:text-4xl md:text-6xl lg:text-7xl font-bold mb-6 leading-tight text-gray-900 inknut-antiqua-bold">
            {magazine.data.title}
          </h1>
          {magazine.data.subtitle && (
            <h2 class="text-xl sm:text-2xl md:text-3xl mb-4 text-neutral-800">
              {magazine.data.subtitle}
            </h2>
          )}
          <p class="text-lg sm:text-xl md:text-2xl mb-8 max-w-none md:max-w-2xl mx-auto md:mx-0 leading-relaxed text-gray-800 px-4 md:px-0">
            {magazine.data.description}
          </p>
          <div class="flex flex-wrap gap-2 mb-6">
            {magazine.data.tags.map((tag) => (
              <span class="px-3 py-1 bg-gray-100 text-neutral-800 text-sm rounded-full border border-gray-200">{tag}</span>
            ))}
          </div>
          <div class="text-sm text-neutral-800">
            <span>Volume {magazine.data.volume}</span>
            <span class="mx-2">â€¢</span>
            <span>Published {magazine.data.publishDate.toLocaleDateString()}</span>
          </div>
        </div>
        <div class="w-full md:w-1/2 flex justify-center md:justify-end items-center flex-col">
          <div class="relative">
            <Image
              src={coverImage || magazine.data.coverImage}
              alt={magazine.data.title}
              class="w-full h-auto object-cover"
              width={480}
              height={270}
              loading="eager"
              format="webp"
              fetchpriority="high"
            />
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Magazine Flipbook -->
  {allPageImages.length > 0 ? (
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <p class="text-sm text-gray-500 mb-4">Found {allPageImages.length} page images</p>
      <MagazineFlipbook 
        pageImages={allPageImages}
        title={`${magazine.data.title} - Preview`}
        isPreview={true}
        magazineSlug={magazine.slug}
        colorPalette={colorPalette}
        coverImage={coverImage?.src || magazine.data.coverImage}
        client:load
      />
    </div>
  ) : (
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <p class="text-center text-gray-500">No page images found for this magazine.</p>
    </div>
  )}

  <!-- Magazine Content -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-16 pb-16">
    <div class="prose prose-lg max-w-none">
      <Content />
    </div>
  </section>
</LayoutHeader>

